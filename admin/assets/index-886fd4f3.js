import{D as m}from"./index-244fe67e.js";class o extends Error{constructor(e){super(e.message),this.ERR_TYPE="MediaListError",this.title=e.title,this.docsLink=e.docsLink}}const h=new o({title:"An Error Occurred",message:"Something went wrong fetching your media from S3.",docsLink:"https://tina.io/packages/next-tinacms-s3"}),p=new o({title:"Unauthorized",message:"You don't have access to this resource.",docsLink:"https://tina.io/packages/next-tinacms-s3"}),l=new o({title:"Missing Credentials",message:"Unable to connect to S3 because one or more environment variables are missing.",docsLink:"https://tina.io/docs/media-s3/"}),f=new o({title:"Bad Credentials",message:"Unable to connect to S3 because one or more environment variables are misconfigured.",docsLink:"https://tina.io/docs/media-s3/"}),w=new o({title:"Bad Route",message:"The S3 API route is missing or misconfigured.",docsLink:"https://tina.io/packages/next-tinacms-s3/#set-up-api-routes"}),E=a=>{switch(a){case"Must supply cloud_name":case"Must supply api_key":case"Must supply api_secret":return l;case"unknown api_key":return f;default:return h}};class g{constructor(){this.fetchFunction=(e,s)=>fetch(e,s),this.accept=m,this.parse=e=>e.src}async persist(e){const s=[];for(const t of e){const{file:n,directory:i}=t,r=new FormData;r.append("file",n),r.append("directory",i),r.append("filename",n.name);const c=await this.fetchFunction("/api/s3/media",{method:"POST",body:r});if(c.status!=200){const u=await c.json();throw new Error(u.message)}const d=await c.json();await new Promise(u=>{setTimeout(u,2e3)}),s.push(d)}return s}async delete(e){await this.fetchFunction(`/api/s3/media/${encodeURIComponent(e.id)}`,{method:"DELETE"})}async list(e){const s=this.buildQuery(e),t=await this.fetchFunction("/api/s3/media"+s);if(t.status==401)throw p;if(t.status==404)throw w;if(t.status>=500){const{e:r}=await t.json();throw E(r)}const{items:n,offset:i}=await t.json();return{items:n.map(r=>r),nextOffset:i}}buildQuery(e){return`?${Object.keys(e).filter(t=>e[t]!==""&&e[t]!==void 0).map(t=>`${t}=${e[t]}`).join("&")}`}}class _ extends g{constructor(e){super(),this.client=e,this.fetchFunction=async(s,t)=>{try{const n=s.toString(),i=`${n.includes("?")?"&":"?"}clientID=${e.clientId}`;return e.authProvider.fetchWithToken(n+i,t)}catch(n){console.error(n)}}}}export{g as S3MediaStore,_ as TinaCloudS3MediaStore};
